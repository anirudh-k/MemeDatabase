@charset "UTF-8";
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$g=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [g=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
.meme_input {
  padding-top: 2%;
  font-size: 1.75rem; }

.meme_input2 {
  padding-top: 1%;
  font-size: 1.2rem; }

.button {
  display: inline-block;
  border-radius: 4px;
  background-color: #21B291;
  border: none;
  color: #FFFFFF;
  text-align: center;
  font-size: 28px;
  padding: 20px;
  width: 200px;
  transition: all 0.5s;
  cursor: pointer;
  margin: 5px; }

.button span {
  cursor: pointer;
  display: inline-block;
  position: relative;
  transition: 0.5s; }

.button span:after {
  content: 'Â»';
  position: absolute;
  opacity: 0;
  top: 0;
  right: -20px;
  transition: 0.5s; }

.button:hover span {
  padding-right: 25px; }

.button:hover span:after {
  opacity: 1;
  right: 0; }

.headline {
  font-size: 3.75rem; }

.white {
  color: #fff; }

.grey {
  color: #5E5E5E; }

.grey2 {
  color: #DFDEDE; }

.hero {
  padding: 12px 0 90px 0;
  background: #48cfad;
  z-index: 10; }

.text-center {
  text-align: center; }

section2 {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 22.75%;
  margin-left: 0%;
  margin-right: 3%;
  margin-left: 25%;
  padding-top: .35%; }
  section2:before, section2:after {
    content: '';
    display: table; }
  section2:after {
    clear: both; }
  section2:last-child {
    margin-right: 0%; }

article2 {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 22.75%;
  margin-left: 0%;
  margin-right: 3%;
  width: 100%;
  font-size: 1.3rem; }
  article2:before, article2:after {
    content: '';
    display: table; }
  article2:after {
    clear: both; }
  article2:last-child {
    margin-right: 0%; }

section {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 74.25%;
  margin-left: 0%;
  margin-right: 3%;
  float: left;
  width: 22.75%; }
  section:before, section:after {
    content: '';
    display: table; }
  section:after {
    clear: both; }
  section:last-child {
    margin-right: 0%; }

article {
  *zoom: 1;
  float: left;
  clear: none;
  text-align: inherit;
  width: 74.25%;
  margin-left: 0%;
  margin-right: 3%;
  width: 100%;
  font-size: 1.3rem; }
  article:before, article:after {
    content: '';
    display: table; }
  article:after {
    clear: both; }
  article:last-child {
    margin-right: 0%; }

.h1 {
  font-family: 'Helvetica W02 Roman', "Helvetica Neue", Helvetica, Arial, sans-serif, arial, sans-serif; }

.about {
  background: #FEDBD5;
  font-size: 2rem; }

.for-picture {
  margin-left: 37%;
  height: 500px;
  width: 30%; }

/*# sourceMappingURL=style.css.map */
